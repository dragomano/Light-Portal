<?php declare(strict_types=1);

/**
 * @package Reactions (Light Portal)
 * @link https://custom.simplemachines.org/index.php?mod=4244
 * @author Bugo <bugo@dragomano.ru>
 * @copyright 2023-2025 Bugo
 * @license https://spdx.org/licenses/GPL-3.0-or-later.html GPL-3.0-or-later
 *
 * @category plugin
 * @version 14.02.25
 */

namespace Bugo\LightPortal\Plugins\Reactions;

use Bugo\Compat\Db;
use Bugo\Compat\Theme;
use Bugo\Compat\User;
use Bugo\Compat\Utils;
use Bugo\LightPortal\Plugins\Event;
use Bugo\LightPortal\Plugins\Plugin;
use Bugo\LightPortal\UI\Fields\CheckboxField;

if (! defined('LP_NAME'))
	die('No direct access...');

/**
 * Generated by PluginMaker
 */
class Reactions extends Plugin
{
	public string $type = 'page_options';

	private const PARAM = 'allow_reactions';

	public function preparePageParams(Event $e): void
	{
		$e->args->params[self::PARAM] = false;
	}

	public function validatePageParams(Event $e): void
	{
		$e->args->params[self::PARAM] = FILTER_VALIDATE_BOOLEAN;
	}

	public function preparePageFields(Event $e): void
	{
		CheckboxField::make(self::PARAM, $this->txt[self::PARAM])
			->setValue($e->args->options[self::PARAM]);
	}

	public function preparePageData(Event $e): void
	{
		[$data, $isAuthor] = [$e->args->data, $e->args->isAuthor];

		if (empty($data['options'][self::PARAM]))
			return;

		Utils::$context['can_react'] = empty($isAuthor);

		Theme::addInlineJavaScript('
			document.addEventListener("addReaction", (event) => {
				const pageUrl = ' . Utils::escapeJavaScript(LP_PAGE_URL . $data['slug']) . '
				const isComment = typeof event.detail.comment !== "undefined"
				axios.post(pageUrl + ";add_reaction", event.detail)
					.then(() => {
						isComment
						? axios
							.post(pageUrl + ";get_reactions", {
								comment: event.detail.comment
							})
							.then(response => {
								window["commentReactions" + event.detail.comment].showButtons = false
								window["commentReactions" + event.detail.comment].reactions = response.data
							})
						: axios
							.get(pageUrl + ";get_reactions")
							.then(response => {
								window.pageReactions.showButtons = false
								window.pageReactions.reactions = response.data
							})
					})
			})', true);

		$reactions = json_decode($data['options'][$this->name] ?? '', true) ?? [];

		Utils::$context['reaction_buttons'] = $this->getButtons();
		Utils::$context['prepared_buttons'] = json_decode(Utils::$context['reaction_buttons'], true);
		Utils::$context['prepared_reactions'] = json_decode($this->getReactionsWithCount($reactions), true);

		if ($this->request()->has('get_reactions')) {
			$json = $this->request()->json();

			if (isset($json['comment'])) {
				$commentReactions = $this->getReactions($json['comment'], 'comment');
				exit($this->getReactionsWithCount($commentReactions));
			}

			exit($this->getReactionsWithCount($reactions));
		}

		if ($this->request()->has('add_reaction')) {
			$json = $this->request()->json();

			if (isset($json['reaction'])) {
				if (isset($json['comment'])) {
					$commentReactions = $this->getReactions($json['comment'], 'comment');
					$commentReactions[User::$info['id']] = $json['reaction'];
					$this->addReaction($json['comment'], json_encode($commentReactions), 'comment');
					$this->cache()->forget('page_' . $data['slug'] . '_comments');
				} else {
					$reactions[User::$info['id']] = $json['reaction'];
					$this->addReaction($data['id'], json_encode($reactions));
					$this->cache()->forget('page_' . $data['slug']);
				}
			}
		}

		$this->setTemplate();
	}

	public function afterPageContent(): void
	{
		if (empty(Utils::$context['lp_page']['options'][self::PARAM]))
			return;

		show_page_reactions();
	}

	public function commentButtons(Event $e): void
	{
		if (empty(Utils::$context['lp_page']['options'][self::PARAM]))
			return;

		$comment = $e->args->comment;

		$comment['can_react'] = $comment['poster']['id'] !== User::$info['id'];
		$comment[$this->name] = json_decode($comment['params'][$this->name] ?? '', true) ?? [];
		$comment['prepared_reactions'] = $this->getReactionsWithCount($comment[$this->name]);
		$comment['prepared_buttons'] = json_decode($comment['prepared_reactions'], true);

		ob_start();

		show_comment_reactions($comment);

		$e->args->buttons[] = ob_get_clean();
	}

	private function getReactionsWithCount(array $reactions): string
	{
		return $this->response()->json(array_count_values($reactions) ?? '', JSON_FORCE_OBJECT);
	}

	private function getButtons(): string
	{
		$buttons = [
			[
				'name' => 'like',
				'title' => $this->txt['titles'][0],
				'emoji' => '👍',
			],
			[
				'name' => 'dislike',
				'title' => $this->txt['titles'][1],
				'emoji' => '👎',
			],
			[
				'name' => 'love',
				'title' => $this->txt['titles'][2],
				'emoji' => '❤️',
			],
			[
				'name' => 'laugh',
				'title' => $this->txt['titles'][3],
				'emoji' => '😆',
			],
			[
				'name' => 'sad',
				'title' => $this->txt['titles'][4],
				'emoji' => '😢',
			],
			[
				'name' => 'angry',
				'title' => $this->txt['titles'][5],
				'emoji' => '😡',
			]
		];

		return json_encode($buttons);
	}

	private function getReactions(int $id, string $entity = 'page'): array
	{
		$result = Db::$db->query('', '
			SELECT value
			FROM {db_prefix}lp_params
			WHERE item_id = {int:id}
				AND type = {string:entity}
				AND name = {literal:reactions}
			LIMIT 1',
			[
				'id'     => $id,
				'entity' => $entity,
			]
		);

		[$reactions] = Db::$db->fetch_row($result);

		Db::$db->free_result($result);

		return json_decode($reactions ?? '', true) ?? [];
	}

	private function addReaction(int $id, string $value, string $entity = 'page'): void
	{
		Db::$db->insert('replace',
			'{db_prefix}lp_params',
			[
				'item_id' => 'int',
				'type'    => 'string',
				'name'    => 'string',
				'value'   => 'string'
			],
			[
				'item_id' => $id,
				'type'    => $entity,
				'name'    => $this->name,
				'value'   => $value
			],
			['item_id', 'type', 'name']
		);

		$this->response()->exit(['success' => true]);
	}
}
