<?php

/**
 * @package TrendingTopics (Light Portal)
 * @link https://custom.simplemachines.org/index.php?mod=4244
 * @author Bugo <bugo@dragomano.ru>
 * @copyright 2023-2024 Bugo
 * @license https://spdx.org/licenses/GPL-3.0-or-later.html GPL-3.0-or-later
 *
 * @category addon
 * @version 02.06.24
 */

namespace Bugo\LightPortal\Addons\TrendingTopics;

use Bugo\Compat\{Config, Lang, User, Utils};
use Bugo\LightPortal\Addons\Block;
use Bugo\LightPortal\Areas\Fields\CheckboxField;
use Bugo\LightPortal\Areas\Fields\NumberField;
use Bugo\LightPortal\Areas\Fields\SelectField;
use Bugo\LightPortal\Enums\Tab;
use Bugo\LightPortal\Utils\Avatar;
use Bugo\LightPortal\Utils\DateTime;
use IntlException;

if (! defined('LP_NAME'))
	die('No direct access...');

/**
 * Generated by PluginMaker
 */
class TrendingTopics extends Block
{
	public string $icon = 'fas fa-arrow-trend-up';

	private array $timePeriod = [
		'1 day', '1 week', '2 week', '1 month', '2 month', '4 month', '6 month', '8 month', '1 year'
	];

	public function prepareBlockParams(array &$params): void
	{
		if (Utils::$context['current_block']['type'] !== 'trending_topics')
			return;

		$params = [
			'no_content_class' => true,
			'show_avatars'     => true,
			'time_period'      => '1 week',
			'min_replies'      => 10,
			'num_topics'       => 10,
		];
	}

	public function validateBlockParams(array &$params): void
	{
		if (Utils::$context['current_block']['type'] !== 'trending_topics')
			return;

		$params['show_avatars'] = FILTER_VALIDATE_BOOLEAN;
		$params['time_period']  = FILTER_DEFAULT;
		$params['min_replies']  = FILTER_VALIDATE_INT;
		$params['num_topics']   = FILTER_VALIDATE_INT;
	}

	public function prepareBlockFields(): void
	{
		if (Utils::$context['current_block']['type'] !== 'trending_topics')
			return;

		CheckboxField::make('show_avatars', Lang::$txt['lp_trending_topics']['show_avatars'])
			->setTab(Tab::APPEARANCE)
			->setValue(Utils::$context['lp_block']['options']['show_avatars']);

		SelectField::make('time_period', Lang::$txt['lp_trending_topics']['time_period'])
			->setOptions(array_combine($this->timePeriod, Lang::$txt['lp_trending_topics']['time_period_set']))
			->setValue(Utils::$context['lp_block']['options']['time_period']);

		NumberField::make('min_replies', Lang::$txt['lp_trending_topics']['min_replies'])
			->setAttribute('min', 1)
			->setValue(Utils::$context['lp_block']['options']['min_replies']);

		NumberField::make('num_topics', Lang::$txt['lp_trending_topics']['num_topics'])
			->setAttribute('min', 1)
			->setValue(Utils::$context['lp_block']['options']['num_topics']);
	}

	/**
	 * @throws IntlException
	 */
	public function getData(array $parameters): array
	{
		$timePeriod  = $parameters['time_period'] ?? $this->timePeriod[1];
		$topicsCount = empty($parameters['num_topics']) ? 0 : (int) $parameters['num_topics'];

		if (empty($topicsCount))
			return [];

		$result = Utils::$smcFunc['db_query']('', '
			SELECT DISTINCT t.id_topic, t.id_member_started, t.num_replies,
				COALESCE(mem.real_name, mf.poster_name) AS poster_name, mf.subject,
				ml.id_msg, ml.poster_time
			FROM {db_prefix}topics t
				INNER JOIN {db_prefix}messages AS ml ON (ml.id_msg = t.id_last_msg)
				INNER JOIN {db_prefix}messages AS mf ON (mf.id_msg = t.id_first_msg)
				LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = t.id_member_started)
			WHERE ml.poster_time >= UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL {raw:period}))
			ORDER BY t.num_replies DESC
			LIMIT {int:limit}',
			[
				'period' => strtoupper((string) $timePeriod),
				'limit'  => $topicsCount,
			]
		);

		$topics = [];
		while ($row = Utils::$smcFunc['db_fetch_assoc']($result)) {
			$topics[$row['id_topic']] = [
				'subject'     => $row['subject'],
				'id_msg'      => $row['id_msg'],
				'poster_time' => DateTime::relative($row['poster_time']),
				'num_replies' => $row['num_replies'],
				'poster'      => [
					'id'   => $row['id_member_started'],
					'name' => $row['poster_name'],
				],
			];
		}

		Utils::$smcFunc['db_free_result']($result);

		return $parameters['show_avatars'] ? Avatar::getWithItems($topics, 'poster') : $topics;
	}

	public function prepareContent(object $data, array $parameters): void
	{
		if ($data->type !== 'trending_topics')
			return;

		$topics = $this->cache('trending_topics_addon_b' . $data->id . '_u' . User::$info['id'])
			->setLifeTime($data->cacheTime)
			->setFallback(self::class, 'getData', $parameters);

		if ($topics) {
			echo '
			<ul class="trending_topics noup">';

			foreach ($topics as $id => $topic) {
				echo '
				<li class="windowbg">';

				if (! empty($parameters['show_avatars']) && isset($topic['poster']['avatar']))
					echo '
					<span class="poster_avatar" title="', $topic['poster']['name'], '">
						', $topic['poster']['avatar'], '
					</span>';

				echo '
					<a href="', Config::$scripturl, '?topic=' . $id . '.msg' . $topic['id_msg'] . ';topicseen#new">', $topic['subject'], '</a> <span>', $topic['poster_time'], ' (', Lang::getTxt('lp_replies_set', ['replies' => $topic['num_replies']]), ')</span>
				</li>';
			}

			echo '
			</ul>';
		} else {
			echo '<div class="infobox">', Lang::$txt['lp_trending_topics']['none'], '</div>';
		}
	}
}
